# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_EMAIL   - login info for docker hub
# DOCKER_USER
# DOCKER_PASS
#
machine:
  services:
    - docker

  node:
    version: 0.12.10

dependencies:

  # make sure to keep the docker cache dir
  cache_directories:
    - "~/docker"

  pre:
    # https://discuss.circleci.com/t/nvm-commands-are-not-evaluated/943
    - nvm use 0.12.10 && nvm alias default 0.12.10

  override:
    - docker info
    - node --version
    - npm --version

    # used by npm test for frontend testing
    - google-chrome --version

    # build the container, use circleci's docker cache workaround
    # only use 1 image per day to keep the cache size from getting
    # too big and slowing down the build
    - I="image-$(date +%j).tgz"; if [[ -e ~/docker/$I ]]; then echo "Loading $I"; gunzip -c ~/docker/$I | docker load; fi

    # create a version.json
    - printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s"}\n' "$CIRCLE_SHA1" "$CIRCLE_TAG" "$CIRCLE_PROJECT_USERNAME" "$CIRCLE_PROJECT_REPONAME" > version.json

    # build static assets
    - npm install
    - npm run lint
    - npm run build
    - npm test

    # build the actual deployment container
    - docker build -t app:build .

    # Clean up any old images and save the new one
    - I="image-$(date +%j).tgz"; mkdir -p ~/docker; rm ~/docker/*; docker save app:build | gzip -c > ~/docker/$I; ls -l ~/docker

test:
  override:
    - >
        docker run --net=host
        -e 'DEBUG=False' 
        -e 'SECRET_KEY=Foo' 
        -e 'ALLOWED_HOSTS=localhost' 
        -e 'DATABASE_URL=postgres://ubuntu@localhost/circle_test' 
        --user root app:build sh -c 'flake8 testpilot && ./manage.py test -v2 testpilot'

# appropriately tag and push the container to dockerhub
deployment:
  hub_latest:
    branch: "master"
    commands:
      - "[ ! -z $DOCKERHUB_REPO ]"
      - docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS
      - "docker tag app:build ${DOCKERHUB_REPO}:latest"
      - "docker push ${DOCKERHUB_REPO}:latest"

  hub_releases:
    # push all tags
    tag: /.*/
    commands:
      - "[ ! -z $DOCKERHUB_REPO ]"
      - docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS
      - "docker tag app:build ${DOCKERHUB_REPO}:${CIRCLE_TAG}"
      - "docker images"
      - "docker push ${DOCKERHUB_REPO}:${CIRCLE_TAG}"
